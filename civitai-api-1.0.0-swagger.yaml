openapi: 3.1.0
info:
  version: 1.0.0
  title: Civitai API
  description: >-
    This is the REST API for Civitai, a platform for sharing AI models and
    resources.
  termsOfService: https://civitai.com/content/tos
  contact:
    name: Community Manager
    email: support@civitai.com
externalDocs:
  description: Official API Documentation
  url: https://developer.civitai.com/docs/api/public-rest
servers:
  - url: https://civitai.com/api/v1
tags:
  - name: Endpoints
paths:
  /creators:
    get:
      tags: [Endpoints]
      summary: Get creators
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Query'
      responses:
        '200':
          $ref: '#/components/responses/Creators'
  /images:
    get:
      tags: [Endpoints]
      summary: Get images
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/PostID'
        - $ref: '#/components/parameters/ModelID'
        - $ref: '#/components/parameters/ModelVersionID'
        - $ref: '#/components/parameters/Username'
        - $ref: '#/components/parameters/NSFW'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Period'
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          $ref: '#/components/responses/Images'
  /models:
    get:
      tags: [Endpoints]
      summary: Get models
      parameters:
        - $ref: '#/components/parameters/ModelsLimit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Query'
        - $ref: '#/components/parameters/Tag'
        - name: username
          in: query
          description: Search query to filter models by user
          schema:
            type: string
        - name: types
          in: query
          description: The type of model you want to filter with
          schema:
            type: array
            items:
              type: string
              enum:
                - Checkpoint
                - TextualInversion
                - Hypernetwork
                - AestheticGradient
                - LORA
                - Controlnet
                - Poses
        - name: sort
          in: query
          description: The order in which you wish to sort the results
          schema:
            type: string
            enum:
              - Highest Rated
              - Most Downloaded
              - Newest
        - name: period
          in: query
          description: The time frame in which the models will be sorted
          schema:
            type: string
            enum:
              - AllTime
              - Year
              - Month
              - Week
              - Day
        - name: favorites
          in: query
          description: >-
            Filter to favorites of the authenticated user (requires API token or
            session cookie)
          schema:
            type: boolean
        - name: hidden
          in: query
          description: >-
            Filter to hidden models of the authenticated user (requires API
            token or session cookie)
          schema:
            type: boolean
        - name: primaryFileOnly
          in: query
          description: Only include the primary file for each model
          schema:
            type: boolean
        - name: allowNoCredit
          in: query
          description: Filter to models that require or don't require crediting the creator
          schema:
            type: boolean
        - name: allowDerivatives
          in: query
          description: Filter to models that allow or don't allow creating derivatives
          schema:
            type: boolean
        - name: allowDifferentLicenses
          in: query
          description: >-
            Filter to models that allow or don't allow derivatives to have a
            different license
          schema:
            type: boolean
        - name: allowCommercialUse
          in: query
          description: Filter to models based on their commercial permissions
          schema:
            type: string
            enum:
              - None
              - Image
              - Rent
              - Sell
        - name: nsfw
          in: query
          description: >-
            If false, will return safer images and hide models that don't have
            safe images
          schema:
            type: boolean
        - name: supportsGeneration
          in: query
          description: 'If true, will return models that support generation'
          schema:
            type: boolean
      responses:
        '200':
          $ref: '#/components/responses/Models'
  '/models/{modelId}':
    get:
      tags: [Endpoints]
      summary: Get a model
      parameters:
        - name: modelId
          in: path
          required: true
          description: The ID of the model
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
  '/model-versions/{modelVersionId}':
    get:
      tags: [Endpoints]
      summary: Get a model version
      parameters:
        - name: modelVersionId
          in: path
          required: true
          description: The ID of the model version
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
  '/model-versions/by-hash/{hash}':
    get:
      tags: [Endpoints]
      summary: Get a model version by hash
      parameters:
        - name: hash
          in: path
          required: true
          description: The hash of the model version
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
  /tags:
    get:
      tags: [Endpoints]
      summary: Get tags
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Query'
      responses:
        '200':
          $ref: '#/components/responses/Tags'
components:
  parameters:
    Limit:
      name: limit
      in: query
      description: The number of results to be returned per page (between 0 and 200)
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
    ModelsLimit:
      name: limit
      in: query
      description: The number of results to be returned per page. This can be a number between 1 and 100. By default, each page will return 100 results
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 200
    Page:
      name: page
      in: query
      description: The page from which to start fetching creators
      required: false
      schema:
        type: integer
        minimum: 0
    Query:
      name: query
      in: query
      description: Search query to filter by
      required: false
      schema:
        type: string
    PostID:
      name: postId
      in: query
      description: The ID of a post to get images from
      required: false
      schema:
        type: integer
    ModelID:
      name: modelId
      in: query
      description: The ID of a model to get images from (model gallery)
      required: false
      schema:
        type: integer
    ModelVersionID:
      name: modelVersionId
      in: query
      description: The ID of a model version to get images from (model gallery filtered to version)
      required: false
      schema:
        type: integer
    Username:
      name: username
      in: query
      description: Filter to images from a specific user
      required: false
      schema:
        type: string
    NSFW:
      name: nsfw
      in: query
      description: Filter to images that contain mature content flags or not
      required: false
      schema:
        type: string
        enum:
          - None
          - Soft
          - Mature
          - X
    Sort:
      name: sort
      in: query
      description: The order in which you wish to sort the results
      schema:
        type: string
        enum:
          - Most Reactions
          - Most Comments
          - Newest
    Period:
      name: period
      in: query
      description: The time frame in which the images will be sorted
      required: false
      schema:
        type: string
        enum:
          - AllTime
          - Year
          - Month
          - Week
          - Day
    Tag:
      name: tag
      in: query
      description: Search query to filter models by tag
      required: false
      schema:
        type: string
  responses:
    Creators:
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Creator'
              metadata:
                $ref: '#/components/schemas/Metadata'
    Models:
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
              metadata:
                $ref: '#/components/schemas/Metadata'
    Images:
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
              metadata:
                $ref: '#/components/schemas/Metadata'
    Tags:
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
                metadata:
                  $ref: '#/components/schemas/Metadata'
  schemas:
    Creator:
      type: object
      properties:
        username:
          type: string
          description: The username of the creator
        modelCount:
          type: integer
          description: The amount of models linked to this user
        link:
          type: string
          description: Url to get all models from this user
        image:
          type: string
          nullable: true
          descirption: The users profile image link
    Image:
      type: object
      properties:
        id:
          type: integer
          description: The id of the image
        url:
          type: string
          description: The url of the image at it's source resolution
        hash:
          type: string
          description: The blurhash of the image
        width:
          type: integer
          description: The width of the image
        height:
          type: integer
          description: The height of the image
        nsfwLevel:
          type: string
          enum:
            - None
            - Soft
            - Mature
            - X
          description: The NSFW level of the image
        nsfw:
          type: boolean
          description: If the image has any mature content labels
        browsingLevel:
          type: integer
        createdAt:
          type: string
          format: date-time
          description: The date the image was posted
        postId:
          type: integer
          description: The ID of the post the image belongs to
        stats:
          $ref: '#/components/schemas/ImageStats'
        meta:
          $ref: '#/components/schemas/GenerationStats'
        username:
          type: string
          description: The username of the creator
    ImageMetaHashes:
      type: object
    Resources:
      type: array
      items:
        $ref: '#/components/schemas/Resource'
    CivitaiResources:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/CivitaiWeightResource'
          - $ref: '#/components/schemas/CivitaiResource'
    CivitaiWeightResource:
      type: object
      properties:
        type:
          type: string
        weight:
          type: number
          format: double
        modelVersionId:
          type: integer
          format: int64
    CivitaiResource:
      type: object
      properties:
        type:
          type: string
        modelVersionId:
          type: integer
          format: int64
    Resource:
      type: object
      properties:
        hash:
          type: string
        name:
          type: string
        type:
          type: string
    GenerationStats:
      type: object
      properties:
        RNG:
          type: string
        Size:
          type: string
        seed:
          type: integer
          format: int64
        Model:
          type: string
        steps:
          type: integer
        hashes:
          $ref: '#/components/schemas/ImageMetaHashes'
        prompt:
          type: string
        Version:
          type: string
        sampler:
          type: string
        cfgScale:
          type: number
          format: double
        clipSkip:
          type: integer
        resources:
          $ref: '#/components/schemas/Resources'
        civitaiResources:
          $ref: '#/components/schemas/CivitaiResources'
        Model hash:
          type: string
        negativePrompt:
          type: string
        Denoising strength:
          type: string
        multidiffusion_method:
          type: string
        multidiffusion_enabled:
          type: string
        multidiffusion_tile_width:
          type: string
        multidiffusion_tile_height:
          type: string
        multidiffusion_tile_overlap:
          type: string
        multidiffusion_tile_batch_size:
          type: string
    ImageStats:
      type: object
      properties:
        cryCount:
          type: integer
          description: The number of cry reactions
        laughCount:
          type: integer
          description: The number of laugh reactions
        likeCount:
          type: integer
          description: The number of like reactions
        heartCount:
          type: integer
          description: The number of heart reactions
        commentCount:
          type: integer
          description: The number of comment reactions
    Model:
      type: object
      properties:
        id:
          type: integer
          description: The identifier for the model
        name:
          type: string
          description: The name of the model
        description:
          type: string
          description: The description of the model (HTML)
        allowDerivatives:
          type: boolean
        allowDifferentLicense:
          type: boolean
        type:
          type: string
          enum:
            - Checkpoint
            - TextualInversion
            - Hypernetwork
            - AestheticGradient
            - LORA
            - Controlnet
            - Poses
          description: The model type
        minor:
          type: boolean
        poi:
          type: boolean
        nsfwLevel:
          type: number
        nsfw:
          type: boolean
          description: Whether the model is NSFW or not
        tags:
          type: array
          items:
            type: string
          description: The tags associated with the model
        mode:
          type: string
          enum:
            - Archived
            - TakenDown
          nullable: true
          description: >-
            The mode in which the model is currently on. If Archived, files
            field will be empty. If TakenDown, images field will be empty
        creator:
          $ref: '#/components/schemas/Creator'
        stats:
          $ref: '#/components/schemas/Stats'
        modelVersions:
          type: array
          items:
            $ref: '#/components/schemas/ModelVersion'
    Stats:
      type: object
      properties:
        downloadCount:
          type: integer
          description: The number of downloads the model has
        favoriteCount:
          type: integer
          description: The number of favorites the model has
        thumbsUpCount:
          type: integer
          description: The number of thumbs up the model has
        thumbsDownCount:
          type: integer
          description: The number of thumbs down the model has
        commentCount:
          type: integer
          description: The number of comments the model has
        ratingCount:
          type: integer
          description: The number of ratings the model has
        rating:
          type: number
          description: The average rating of the model
        tippedAmountCount:
          type: integer
          description: The amount of tipped buzz of the model
    ModelVersion:
      type: object
      properties:
        id:
          type: integer
          description: The identifier for the model version
        index:
          type: integer
        name:
          type: string
          description: The name of the model version
        description:
          type: string
          description: The description of the model version (usually a changelog)
        baseModel:
          type: string
        baseModelType:
          type: string
        status:
          type: string
        availability:
          type: string
        nsfwLevel:
          type: number
        createdAt:
          type: string
          format: date-time
          description: The date in which the version was created
        publishedAt:
          type: string
          format: date-time
        trainedWords:
          type: array
          items:
            type: string
          description: The words used to trigger the model
        files:
          type: array
          items:
            $ref: '#/components/schemas/ModelFile'
        stats:
          $ref: '#/components/schemas/ModelVersionStats'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ModelImage'
        downloadUrl:
          type: string
          description: The download url to get the model file for this specific version
    ModelVersionStats:
      type: object
      properties:
        downloadCount:
          type: integer
          format: int64
        ratingCount:
          type: integer
        rating:
          type: number
          format: double
        thumbsUpCount:
          type: integer
        thumbsDownCount:
          type: integer
    ModelFile:
      type: object
      properties:
        id:
          type: integer
        sizeKb:
          type: integer
          format: double
          description: The size of the model file
        name:
          type: string
        type:
          type: string
        pickleScanResult:
          type: string
          description: 'Status of the pickle scan (''Pending'', ''Success'', ''Danger'', ''Error'')'
        pickleScanMessage:
          type: string
        virusScanResult:
          type: string
          description: 'Status of the virus scan (''Pending'', ''Success'', ''Danger'', ''Error'')'
        virusScanMessage:
          type: string
          nullable: true
        scannedAt:
          type: string
          format: date-time
          nullable: true
          description: The date in which the file was scanned
        metadata:
          $ref: '#/components/schemas/ModelFileMetadata'
        hashes:
          $ref: '#/components/schemas/ModFileHashes'
        downloadUrl:
          type: string
        primary:
          type: boolean
          description: If the file is the primary file for the model version
    ModFileHashes:
      type: object
      properties:
        AutoV1:
          type: string
        AutoV2:
          type: string
        SHA256:
          type: string
        CRC32:
          type: string
        BLAKE3:
          type: string
    ModelFileMetadata:
      type: object
      properties:
        fp:
          type: string
          enum:
            - fp16
            - fp32
          description: The specified floating point for the file
        size:
          type: string
          enum:
            - full
            - pruned
          description: The specified model size for the file
        format:
          type: string
          enum:
            - SafeTensor
            - PickleTensor
            - Other
          description: The specified model format for the file
    ModelImage:
      type: object
      properties:
        id:
          type: integer
          format: int64
        url:
          type: string
          description: The url for the image
        nsfwLevel:
          type: integer
        width:
          type: integer
          description: The original width of the image
        height:
          type: integer
          description: The original height of the image
        hash:
          type: string
          description: The blurhash of the image
        type:
          type: string
    Tag:
      type: object
      properties:
        name:
          type: string
          description: The name of the tag
        modelCount:
          type: integer
          description: The amount of models linked to this tag
        link:
          type: string
          description: Url to get all models from this tag
    Metadata:
      type: object
      properties:
        totalItems:
          type: integer
          description: The total number of items available
        currentPage:
          type: integer
          description: The the current page you are at
        pageSize:
          type: integer
          description: The the size of the batch
        totalPages:
          type: integer
          description: The total number of pages
        nextPage:
          type: string
          description: The url to get the next batch of items
        prevPage:
          type: string
          description: The url to get the previous batch of items
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
    ApiKey:
      type: apiKey
      in: query
      name: token
security:
  - BearerAuth: []
  - ApiKey: []
